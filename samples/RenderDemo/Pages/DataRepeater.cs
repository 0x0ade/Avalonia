using System.Reactive.Linq;
using Avalonia;
using Avalonia.Controls.Primitives;
using System;
using System.Linq;
using System.ComponentModel;
using System.Collections;
using Avalonia.Styling;
using System.Reflection;
using System.Linq.Expressions;
using System.Collections.Generic;

namespace RenderDemo.Pages
{
    public class DataRepeater : TemplatedControl
    {
        internal static readonly DirectProperty<DataRepeater, DataRepeaterHeaderDescriptors> HeaderDescriptorsProperty =
            AvaloniaProperty.RegisterDirect<DataRepeater, DataRepeaterHeaderDescriptors>(
                nameof(HeaderDescriptors),
                o => o.HeaderDescriptors,
                (o, v) => o.HeaderDescriptors = v);

        private DataRepeaterHeaderDescriptors _headerDescriptors;

        internal DataRepeaterHeaderDescriptors HeaderDescriptors
        {
            get => _headerDescriptors;
            set => SetAndRaise(HeaderDescriptorsProperty, ref _headerDescriptors, value);
        }

        public static readonly DirectProperty<DataRepeater, IEnumerable> ItemsProperty =
            AvaloniaProperty.RegisterDirect<DataRepeater, IEnumerable>(
                nameof(Items),
                o => o.Items,
                (o, v) => o.Items = v);

        private IEnumerable _items;

        public IEnumerable Items
        {
            get { return _items; }
            set
            {
                if (value is null)
                    return;

                DoAutoGeneratedHeaders(value.GetItemType());
                SetAndRaise(ItemsProperty, ref _items, value);
            }
        }

        private void DoAutoGeneratedHeaders(Type DataType)
        {
            int i = 0;
            var xdghList = new DataRepeaterHeaderDescriptors();

            foreach (var property in DataType.GetProperties())
            {
                var dispNameAttrib = (DisplayNameAttribute)property
                                        .GetCustomAttributes(typeof(DisplayNameAttribute), false)
                                        .SingleOrDefault();

                if (dispNameAttrib is null)
                    continue;

                var dName = dispNameAttrib.DisplayName;

                var xdgh = new DataRepeaterHeaderDescriptor()
                {
                    HeaderText = dName,
                    PropertyName = property.Name,
                };

                if (typeof(IComparable).IsAssignableFrom(property.PropertyType))
                {
                    xdgh.IsSortable = true;
                    xdgh.GetterDelegate = GeneratePropertyGetter(property, DataType);
                }

                i++;

                xdghList.Add(xdgh);
            }

            HeaderDescriptors = xdghList;

            HeaderDescriptors.SortHeader += OnSortHeader;

            this.DataType = DataType;
        }

        private void OnSortHeader(DataRepeaterHeaderDescriptor target)
        {
            IEnumerable<object> nItem = null;

            switch (target.InternalSortState)
            {
                case DataRepeaterHeaderDescriptor.SortState.Ascending:
                    nItem = ((IEnumerable<object>)Items).OrderBy(target.GetterDelegate);
                    break;
                case DataRepeaterHeaderDescriptor.SortState.Descending:
                    nItem = ((IEnumerable<object>)Items).OrderByDescending(target.GetterDelegate);
                    break;
            }

            if (nItem is null)
                return;

            SetAndRaise(ItemsProperty, ref _items, nItem);
        }

        public Func<object, object> GeneratePropertyGetter(PropertyInfo propertyInfo, Type source)
        {
            var sourceObjectParam = Expression.Parameter(typeof(object));

            Expression returnExpression = Expression.Call(Expression.Convert(sourceObjectParam, source), propertyInfo.GetMethod);

            if (!propertyInfo.PropertyType.IsClass)
            {
                returnExpression = Expression.Convert(returnExpression, typeof(object));
            }

            return (Func<object, object>)Expression.Lambda(returnExpression, sourceObjectParam)
                                                   .Compile();
        }

        public static readonly DirectProperty<DataRepeater, Type> DataTypeProperty =
            AvaloniaProperty.RegisterDirect<DataRepeater, Type>(
                nameof(DataType),
                o => o.DataType,
                (o, v) => o.DataType = v);

        private Type _dataType;

        public Type DataType
        {
            get { return _dataType; }
            set
            {
                if (value is null)
                    return;

                SetAndRaise(DataTypeProperty, ref _dataType, value);
            }
        }
    }
}
